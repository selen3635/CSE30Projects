

/************ Description ************/
  This program is designed for encrypt data that entered from user. It requires
user to enter 4 inputs after program executed. Which means user have entered
four information in order to run program. First of four, user have to enter at
least 8 characters. It could be any characters, letters, numbers even symbols.
The second and thrid one is that user have enter two integers. It it is not
integer or too larger integer, which will result in errors. The fourth one is
that user have to enter a number between -63 to 63 inclusively. After user 
entered these four infomation. Program will ask user to enter a message to 
encrypt. Now user can enter any message that he/she wants to encrypt. Then hit
ENTER key, after this press CONTROL button follow with D button. On the 
termianl will show the encrypted message base on user entered.


/************ How to compile ************/
  In order to compile this program, first we have to go to pa2 directory.
Then we have to make sure that all needed source files are in this directory.
Since Makefile is provided in this directory, we could just simply type 
command "make" in your current working terminal to compile the program.
Because Makefile contains command to compile all source file.


/************ How to Run ************/
  After you compiled your program, there will be an pa2 executeable file in
pa2 directory. In order to run the program, just type "./pa2" with four
more arguments(specified in description) in current working terminal. After
this, just type a message to encrypt. Example:./pa2 cse30rocks 12 12 4,
then enter a message.

/************ Example of Normal Output ************/

[cs30xaeo@ieng9]:pa2:503$ ./pa2 cse30rocks 12 12 4
Hello world!
?RZ??'Q?D5

The output will go to stdout.

/************Example of Abnormal Output ************/
eo@ieng9]:pa2:506$ ./pa2

Usage: ./pa2 passphrase key0 key1 rotateValue
    passphrase   (must be at least eight characters long)
    key0         (must be numeric; decimal, octal, or hexadecimal)
    key1         (must be numeric; decimal, octal, or hexadecimal)
    rotateValue  (must be a decimal value within the range [-63 - +63])

The output will go to stderr.

